{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "env": { "type": "string" },
    "storagePrefix": { "type": "string" },
    "backupAscTableNames": { "type": "array" },
    "backupStorageId": { "type": "string" },
    "backupStorageName": { "type": "string" },
    "restoreStorageName": { "type": "string" },
    "backupStorageContainerForLogicApp": { "type": "string" },
    "backupStorageContainer": { "type": "string" },
    "webApiConnectionName": { "type": "string" },
    "webApiConnectionId": { "type": "string" },
    "datasetName": { "type": "string" },
    "blobDatasetName": { "type": "string" },
    "backupPipelineName": { "type": "string" },
    "restorePipelineName": { "type": "string" },
    "logicAppName": { "type": "string" },
    "alertRuleName": { "type": "string" },
    "actionGroupName": { "type": "string" },
    "actionGroupShortName": { "type": "string" },
    "factoryDeploymentTemplate": { "type": "string" }
  },
  "variables": {
    "factoryId": "[concat('Microsoft.DataFactory/factories/', variables('factoryName'))]",
    "restoreStorageId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('restoreStorageName'))]",
    "backupStorageLink": "[concat(parameters('backupStorageName'),'_link')]",
    "restoreStorageLink": "[concat(parameters('restoreStorageName'),'_link')]",
    "backupPipelineTriggerName": "backup_pipeline_Trigger",
    "restorePipelineTriggerName": "restore_pipeline_Trigger",
    "factoryName": "corruptionRecovery-df",
    "restoreStorageContainer": "restoreContainer"
  },
  "resources": [
    {
      "type": "Microsoft.DataFactory/factories",
      "apiVersion": "2018-06-01",
      "name": "[variables('factoryName')]",
      "location": "East US"
    },
    {
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'),'/',variables('backupStorageLink'))]",
      "properties": {
        "type": "AzureTableStorage",
        "typeProperties": {
          "connectionString": {
            "type": "SecureString",
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('backupStorageName'),';AccountKey=',listKeys(parameters('backupStorageId'), '2019-04-01').keys[0].value)]"
          }
        }
      },
      "dependsOn": [
        "[variables('factoryId')]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/linkedServices",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'),'/',variables('restoreStorageLink'))]",
      "properties": {
        "type": "AzureStorage",
        "typeProperties": {
          "connectionString": {
            "type": "SecureString",
            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', parameters('restoreStorageName'),';BlobEndpoint=', reference(variables('restoreStorageId'), '2019-04-01').primaryEndpoints.blob,';AccountKey=',listKeys(variables('restoreStorageId'), '2019-04-01').keys [0].value)]"
          }
        }
      },
      "dependsOn": [
        "[variables('factoryId')]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'),'/', parameters('backupAscTableNames')[copyIndex()].name, '_backupInput_', parameters('backupStorageName'), '_', parameters('datasetName'))]",
      "copy": {
        "name": "datasetTableCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "type": "AzureTable",
        "linkedServiceName": {
          "type": "LinkedServiceReference",
          "referenceName": "[variables('backupStorageLink')]"
        },
        "typeProperties": {
          "tableName": "[parameters('backupAscTableNames')[copyIndex()].name]"
        },
        "structure": [
          {
            "name": "PartitionKey",
            "type": "String"
          },
          {
            "name": "RowKey",
            "type": "String"
          },
          {
            "name": "Timestamp",
            "type": "DateTimeOffset"
          },
          {
            "name": "AutoProvision",
            "type": "Boolean"
          },
          {
            "name": "SubscriptionId",
            "type": "Guid"
          }
        ],
        "dependsOn": [
          "[variables('factoryId')]",
          "[concat(variables('factoryId'), '/linkedServices/',variables('backupStorageLink'))]"
        ]
      }
    },
    {
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'),'/', parameters('backupAscTableNames')[copyIndex()].name, '_backupOutput_', parameters('restoreStorageName'), '_', parameters('blobDatasetName'))]",
      "copy": {
        "name": "datasetBlobCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "type": "AzureBlob",
        "linkedServiceName": {
          "type": "LinkedServiceReference",
          "referenceName": "[variables('restoreStorageLink')]"
        },
        "typeProperties": {
          "fileName": "[concat(parameters('backupAscTableNames')[copyIndex()].name, '_backup.json')]",
          "folderPath": {
            "type": "Expression",
            "value": "@concat(parameters('backupStorageContainer'),'/',parameters('backupAscTableNames')[copyIndex()].name, formatDateTime(dataset().SliceStart, 'yyyy'), '/', formatDateTime(dataset().SliceStart, 'MM'), '/', formatDateTime(dataset().SliceStart, 'dd'), '/', formatDateTime(dataset().SliceStart, 'HH'))"
          },
          "format": {
            "type": "JsonFormat"
          }
        },
        "parameters": {
          "SliceStart": {
            "value": "@pipeline().Pipeline",
            "type": "Expression"
          }
        },
        "structure": [
          {
            "name": "PartitionKey",
            "type": "String"
          },
          {
            "name": "RowKey",
            "type": "String"
          },
          {
            "name": "Timestamp",
            "type": "DateTimeOffset"
          },
          {
            "name": "AutoProvision",
            "type": "Boolean"
          },
          {
            "name": "SubscriptionId",
            "type": "Guid"
          }
        ]
      },
      "dependsOn": [
        "[variables('factoryId')]",
        "[concat(variables('factoryId'), '/linkedServices/',variables('restoreStorageLink'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'),'/', parameters('backupAscTableNames')[copyIndex()].name, '_restoreOutput_', parameters('backupStorageName'), '_', parameters('datasetName'))]",
      "copy": {
        "name": "datasetTableCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "type": "AzureTable",
        "linkedServiceName": {
          "type": "LinkedServiceReference",
          "referenceName": "[variables('backupStorageLink')]"
        },
        "typeProperties": {
          "tableName": "[parameters('backupAscTableNames')[copyIndex()].name]"
        },
        "structure": [
          {
            "name": "PartitionKey",
            "type": "String"
          },
          {
            "name": "RowKey",
            "type": "String"
          },
          {
            "name": "Timestamp",
            "type": "DateTimeOffset"
          },
          {
            "name": "AutoProvision",
            "type": "Boolean"
          },
          {
            "name": "SubscriptionId",
            "type": "Guid"
          }
        ],
        "dependsOn": [
          "[variables('factoryId')]",
          "[concat(variables('factoryId'), '/linkedServices/',variables('backupStorageLink'))]"
        ]
      }
    },
    {
      "type": "Microsoft.DataFactory/factories/datasets",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'),'/', parameters('backupAscTableNames')[copyIndex()].name, '_restoreInput_', parameters('restoreStorageName'), '_', parameters('blobDatasetName'))]",
      "copy": {
        "name": "datasetBlobCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "type": "AzureBlob",
        "linkedServiceName": {
          "type": "LinkedServiceReference",
          "referenceName": "[variables('restoreStorageLink')]"
        },
        "typeProperties": {
          "fileName": "[concat(parameters('backupAscTableNames')[copyIndex()].name, '_backup.json')]",
          "folderPath": "[parameters('backupStorageContainer')]",
          "format": {
            "type": "JsonFormat"
          }
        },
        "structure": [
          {
            "name": "PartitionKey",
            "type": "String"
          },
          {
            "name": "RowKey",
            "type": "String"
          },
          {
            "name": "Timestamp",
            "type": "DateTimeOffset"
          },
          {
            "name": "AutoProvision",
            "type": "Boolean"
          },
          {
            "name": "SubscriptionId",
            "type": "Guid"
          }
        ]
      },
      "dependsOn": [
        "[variables('factoryId')]",
        "[concat(variables('factoryId'), '/linkedServices/',variables('restoreStorageLink'))]"

      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'), '/',parameters('backupAscTableNames')[copyIndex()].name,parameters('backupPipelineName'))]",
      "copy": {
        "name": "backupPipelineCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "description": "[concat('Periodic Copy activity from ', parameters('backupAscTableNames')[copyIndex()].name, ' table of storage to a blob')]",
        "activities": [
          {
            "name": "CopyFromTableToBlobStorage",
            "type": "Copy",
            "typeProperties": {
              "enableStaging": false,
              "sink": {
                "type": "BlobSink",
                "writeBatchSize": 0,
                "writeBatchTimeout": "00:00:00"
              },
              "source": {
                "type": "AzureTableSource",
                "azureTableSourceIgnoreTableNotFound": true
              }
            },
            "inputs": [
              {
                "type": "DatasetReference",
                "referenceName": "[concat(parameters('backupAscTableNames')[copyIndex()].name, '_backupInput_', parameters('backupStorageName'), '_', parameters('datasetName'))]"
              }
            ],
            "outputs": [
              {
                "type": "DatasetReference",
                "referenceName": "[concat(parameters('backupAscTableNames')[copyIndex()].name, '_backupOutput_', parameters('restoreStorageName'), '_', parameters('blobDatasetName'))]"
              }
            ],
            "policy": {
              "timeout": "1.00:00:00"
            }
          }
        ]
      },
      "dependsOn": [
        "[variables('factoryId')]",
        "[concat(variables('factoryId'),'/datasets/', parameters('backupAscTableNames')[copyIndex()].name, '_backupInput_', parameters('backupStorageName'), '_', parameters('datasetName'))]",
        "[concat(variables('factoryId'),'/datasets/', parameters('backupAscTableNames')[copyIndex()].name, '_backupOutput_', parameters('restoreStorageName'), '_', parameters('blobDatasetName'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'), '/',parameters('backupAscTableNames')[copyIndex()].name,variables('backupPipelineTriggerName'))]",
      "copy": {
        "name": "backupPipelineCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "type": "ScheduleTrigger",
        "typeProperties": {
          "endTime": "2121-06-13T13:38:49.2603387Z",
          "frequency": "Hour",
          "interval": 1,
          "maxConcurrency": 1,
          "startTime": "2020-06-13T13:38:49.2603387Z"
        },
        "pipelines": [
          {
            "pipelineReference": {
              "type": "PipelineReference",
              "referenceName": "[concat(parameters('backupAscTableNames')[copyIndex()].name,parameters('backupPipelineName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/', parameters('backupAscTableNames')[copyIndex()].name,parameters('backupPipelineName'))]"
      ]
    },
    {
      "type": "Microsoft.DataFactory/factories/pipelines",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'), '/', parameters('backupAscTableNames')[copyIndex()].name,parameters('restorePipelineName'))]",
      "copy": {
        "name": "datasetBlobCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "description": "[concat('On demand, one-time, recover ', parameters('backupAscTableNames')[copyIndex()].name, ' table from blob, in case of disaster')]",
        "activities": [
          {
            "name": "RestoreFromBlobToTableStorage",
            "type": "Copy",
            "typeProperties": {
              "enableStaging": false,
              "sink": {
                "type": "AzureTableSink",
                "azureTableInsertType": "replace",
                "azureTablePartitionKeyName": "PartitionKey",
                "azureTableRowKeyName": "RowKey",
                "writeBatchSize": 10000,
                "writeBatchTimeout": "00:00:00"
              },
              "source": {
                "type": "BlobSource",
                "recursive": false
              },
              "translator": {
                "type": "TabularTranslator",
                "columnMappings": "PartitionKey:PartitionKey,RowKey:RowKey,Timestamp:Timestamp,AutoProvision:AutoProvision,SubscriptionId:SubscriptionId"
              }
            },
            "inputs": [
              {
                "type": "DatasetReference",
                "referenceName": "[concat(parameters('backupAscTableNames')[copyIndex()].name, '_restoreInput_', parameters('restoreStorageName'), '_', parameters('blobDatasetName'))]"
              }
            ],
            "outputs": [
              {
                "type": "DatasetReference",
                "referenceName": "[concat(parameters('backupAscTableNames')[copyIndex()].name, '_restoreOutput_', parameters('backupStorageName'), '_', parameters('datasetName'))]"
              }
            ]
          }
        ],
        "policy": {
          "timeout": "1.00:00:00"
        },
        "dependsOn": [
          "[variables('factoryId')]",
          "[concat(variables('factoryId'),'/datasets/', parameters('backupAscTableNames')[copyIndex()].name, '_restoreOutput_', parameters('backupStorageName'), '_', parameters('datasetName'))]",
          "[concat(variables('factoryId'),'/datasets/', parameters('backupAscTableNames')[copyIndex()].name, '_restoreInput_', parameters('restoreStorageName'), '_', parameters('blobDatasetName'))]"
        ]
      }
    },
    {
      "type": "Microsoft.DataFactory/factories/triggers",
      "apiVersion": "2018-06-01",
      "name": "[concat(variables('factoryName'), '/',parameters('backupAscTableNames')[copyIndex()].name,variables('restorePipelineTriggerName'))]",
      "copy": {
        "name": "datasetBlobCopy",
        "count": "[length(parameters('backupAscTableNames'))]"
      },
      "properties": {
        "type": "ScheduleTrigger",
        "typeProperties": {
          "endTime": "2120-06-13T13:02:46.7695857Z",
          "frequency": "Hour",
          "interval": 1,
          "maxConcurrency": 1,
          "startTime": "2020-06-13T13:02:46.7695857Z"
        },
        "pipelines": [
          {
            "pipelineReference": {
              "type": "PipelineReference",
              "referenceName": "[concat(parameters('backupAscTableNames')[copyIndex()].name,parameters('restorePipelineName'))]"
            }
          }
        ]
      },
      "dependsOn": [
        "[concat(variables('factoryId'), '/pipelines/', parameters('backupAscTableNames')[copyIndex()].name,parameters('restorePipelineName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/actionGroups",
      "apiVersion": "2018-03-01",
      "name": "[parameters('actionGroupName')]",
      "location": "global",
      "properties": {
        "groupShortName": "[parameters('actionGroupShortName')]",
        "enabled": true,
        "emailReceivers": [
          {
            "name": "RomeCoreEmail",
            "emailAddress": "romeeng@microsoft.com"
          }
        ]
      }
    },
    {
      "type": "Microsoft.Web/connections",
      "apiVersion": "2016-06-01",
      "name": "[parameters('webApiConnectionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "api": {
          "id": "[parameters('webApiConnectionId')]"
        },
        "displayName": "[parameters('webApiConnectionName')]",
        "parameterValues": {
          "accountName": "[parameters('backupStorageName')]",
          "accessKey": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', parameters('backupStorageName')), '2015-06-15').key2]"
        }
      }
    },
    {
      "type": "Microsoft.Logic/workflows",
      "apiVersion": "2017-07-01",
      "name": "[parameters('logicAppName')]",
      "location": "[resourceGroup().location]",
      "tags": {},
      "properties": {
        "definition": {
          "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2017-07-01/workflowdefinition.json#",
          "contentVersion": "1.0.0.0",
          "actions": {
            "For_each": {
              "type": "Foreach",
              "foreach": "@body('List_blobs')?['value']",
              "description": "Scan all blobs in this folder",
              "actions": {
                "Condition": {
                  "type": "If",
                  "description": "Check LastModified timestamp and whether older than the expiration age variable",
                  "expression": "@less(ticks(items('For_each')?['LastModified']), ticks(addDays(utcnow(), variables('ExpirationAgeInDays'))))",
                  "actions": {
                    "Delete_blob": {
                      "description": "If blob is older than the expiration age, delete it",
                      "type": "ApiConnection",
                      "inputs": {
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['azureblob']['connectionId']"
                          }
                        },
                        "method": "delete",
                        "path": "/datasets/default/files/@{encodeURIComponent(encodeURIComponent(items('For_each')?['Id']))}"
                      },
                      "runAfter": {}
                    }
                  },
                  "runAfter": {}
                }
              },
              "runAfter": {
                "List_blobs": [
                  "Succeeded"
                ]
              }
            },
            "List_blobs": {
              "type": "ApiConnection",
              "inputs": {
                "host": {
                  "connection": {
                    "name": "@parameters('$connections')['azureblob']['connectionId']"
                  }
                },
                "method": "get",
                "path": "[concat('/datasets/default/foldersV2/@{encodeURIComponent(encodeURIComponent(''', parameters('backupStorageContainerForLogicApp'), '''))}')]",
                "queries": {
                  "useFlatListing": true
                }
              },
              "runAfter": {
                "Set_expiration_age_variable_": [
                  "Succeeded"
                ]
              },
              "runtimeConfiguration": {
                "paginationPolicy": {
                  "minimumItemCount": 100000
                }
              }
            },
            "Set_expiration_age_variable_": {
              "description": "A variable to configure the auto expiration age in days. Configured in negative number. Default is -30 (30 days old).",
              "type": "InitializeVariable",
              "inputs": {
                "variables": [
                  {
                    "name": "ExpirationAgeInDays",
                    "type": "Integer",
                    "value": -30
                  }
                ]
              },
              "runAfter": {}
            }
          },
          "parameters": {
            "$connections": {
              "defaultValue": {},
              "type": "Object"
            }
          },
          "triggers": {
            "Recurrence": {
              "type": "Recurrence",
              "recurrence": {
                "frequency": "Day",
                "interval": 1
              }
            }
          },
          "outputs": {}
        },
        "parameters": {
          "$connections": {
            "value": {
              "azureblob": {
                "id": "[parameters('webApiConnectionId')]",
                "connectionId": "[resourceId('Microsoft.Web/connections', parameters('webApiConnectionName'))]",
                "connectionName": "[parameters('webApiConnectionName')]"
              }
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/connections', parameters('webApiConnectionName'))]"
      ]
    }
  ]
}
